// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.20.0
// source: sources.proto

package sourcespb

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	credentialspb "github.com/trufflesecurity/trufflehog/v3/pkg/pb/credentialspb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SourceType int32

const (
	SourceType_SOURCE_TYPE_AZURE_STORAGE              SourceType = 0
	SourceType_SOURCE_TYPE_BITBUCKET                  SourceType = 1
	SourceType_SOURCE_TYPE_CIRCLECI                   SourceType = 2
	SourceType_SOURCE_TYPE_CONFLUENCE                 SourceType = 3
	SourceType_SOURCE_TYPE_DOCKERHUB_IMAGES           SourceType = 4
	SourceType_SOURCE_TYPE_ECR                        SourceType = 5
	SourceType_SOURCE_TYPE_GCS                        SourceType = 6
	SourceType_SOURCE_TYPE_GITHUB                     SourceType = 7
	SourceType_SOURCE_TYPE_PUBLIC_GIT                 SourceType = 8
	SourceType_SOURCE_TYPE_GITLAB                     SourceType = 9
	SourceType_SOURCE_TYPE_JIRA                       SourceType = 10
	SourceType_SOURCE_TYPE_NPM_UNAUTHD_PACKAGES       SourceType = 11
	SourceType_SOURCE_TYPE_PYPI_UNAUTHD_PACKAGES      SourceType = 12
	SourceType_SOURCE_TYPE_S3                         SourceType = 13
	SourceType_SOURCE_TYPE_SLACK                      SourceType = 14
	SourceType_SOURCE_TYPE_FILESYSTEM                 SourceType = 15
	SourceType_SOURCE_TYPE_GIT                        SourceType = 16
	SourceType_SOURCE_TYPE_TEST                       SourceType = 17
	SourceType_SOURCE_TYPE_S3_UNAUTHED                SourceType = 18
	SourceType_SOURCE_TYPE_GITHUB_UNAUTHENTICATED_ORG SourceType = 19
	SourceType_SOURCE_TYPE_BUILDKITE                  SourceType = 20
	SourceType_SOURCE_TYPE_GERRIT                     SourceType = 21
	SourceType_SOURCE_TYPE_JENKINS                    SourceType = 22
	SourceType_SOURCE_TYPE_TEAMS                      SourceType = 23
	SourceType_SOURCE_TYPE_JFROG_ARTIFACTORY          SourceType = 24
	SourceType_SOURCE_TYPE_SYSLOG                     SourceType = 25
)

// Enum value maps for SourceType.
var (
	SourceType_name = map[int32]string{
		0:  "SOURCE_TYPE_AZURE_STORAGE",
		1:  "SOURCE_TYPE_BITBUCKET",
		2:  "SOURCE_TYPE_CIRCLECI",
		3:  "SOURCE_TYPE_CONFLUENCE",
		4:  "SOURCE_TYPE_DOCKERHUB_IMAGES",
		5:  "SOURCE_TYPE_ECR",
		6:  "SOURCE_TYPE_GCS",
		7:  "SOURCE_TYPE_GITHUB",
		8:  "SOURCE_TYPE_PUBLIC_GIT",
		9:  "SOURCE_TYPE_GITLAB",
		10: "SOURCE_TYPE_JIRA",
		11: "SOURCE_TYPE_NPM_UNAUTHD_PACKAGES",
		12: "SOURCE_TYPE_PYPI_UNAUTHD_PACKAGES",
		13: "SOURCE_TYPE_S3",
		14: "SOURCE_TYPE_SLACK",
		15: "SOURCE_TYPE_FILESYSTEM",
		16: "SOURCE_TYPE_GIT",
		17: "SOURCE_TYPE_TEST",
		18: "SOURCE_TYPE_S3_UNAUTHED",
		19: "SOURCE_TYPE_GITHUB_UNAUTHENTICATED_ORG",
		20: "SOURCE_TYPE_BUILDKITE",
		21: "SOURCE_TYPE_GERRIT",
		22: "SOURCE_TYPE_JENKINS",
		23: "SOURCE_TYPE_TEAMS",
		24: "SOURCE_TYPE_JFROG_ARTIFACTORY",
		25: "SOURCE_TYPE_SYSLOG",
	}
	SourceType_value = map[string]int32{
		"SOURCE_TYPE_AZURE_STORAGE":              0,
		"SOURCE_TYPE_BITBUCKET":                  1,
		"SOURCE_TYPE_CIRCLECI":                   2,
		"SOURCE_TYPE_CONFLUENCE":                 3,
		"SOURCE_TYPE_DOCKERHUB_IMAGES":           4,
		"SOURCE_TYPE_ECR":                        5,
		"SOURCE_TYPE_GCS":                        6,
		"SOURCE_TYPE_GITHUB":                     7,
		"SOURCE_TYPE_PUBLIC_GIT":                 8,
		"SOURCE_TYPE_GITLAB":                     9,
		"SOURCE_TYPE_JIRA":                       10,
		"SOURCE_TYPE_NPM_UNAUTHD_PACKAGES":       11,
		"SOURCE_TYPE_PYPI_UNAUTHD_PACKAGES":      12,
		"SOURCE_TYPE_S3":                         13,
		"SOURCE_TYPE_SLACK":                      14,
		"SOURCE_TYPE_FILESYSTEM":                 15,
		"SOURCE_TYPE_GIT":                        16,
		"SOURCE_TYPE_TEST":                       17,
		"SOURCE_TYPE_S3_UNAUTHED":                18,
		"SOURCE_TYPE_GITHUB_UNAUTHENTICATED_ORG": 19,
		"SOURCE_TYPE_BUILDKITE":                  20,
		"SOURCE_TYPE_GERRIT":                     21,
		"SOURCE_TYPE_JENKINS":                    22,
		"SOURCE_TYPE_TEAMS":                      23,
		"SOURCE_TYPE_JFROG_ARTIFACTORY":          24,
		"SOURCE_TYPE_SYSLOG":                     25,
	}
)

func (x SourceType) Enum() *SourceType {
	p := new(SourceType)
	*p = x
	return p
}

func (x SourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_sources_proto_enumTypes[0].Descriptor()
}

func (SourceType) Type() protoreflect.EnumType {
	return &file_sources_proto_enumTypes[0]
}

func (x SourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SourceType.Descriptor instead.
func (SourceType) EnumDescriptor() ([]byte, []int) {
	return file_sources_proto_rawDescGZIP(), []int{0}
}

type Confluence_GetAllSpacesScope int32

const (
	Confluence_ALL      Confluence_GetAllSpacesScope = 0
	Confluence_GLOBAL   Confluence_GetAllSpacesScope = 1
	Confluence_PERSONAL Confluence_GetAllSpacesScope = 2
)

// Enum value maps for Confluence_GetAllSpacesScope.
var (
	Confluence_GetAllSpacesScope_name = map[int32]string{
		0: "ALL",
		1: "GLOBAL",
		2: "PERSONAL",
	}
	Confluence_GetAllSpacesScope_value = map[string]int32{
		"ALL":      0,
		"GLOBAL":   1,
		"PERSONAL": 2,
	}
)

func (x Confluence_GetAllSpacesScope) Enum() *Confluence_GetAllSpacesScope {
	p := new(Confluence_GetAllSpacesScope)
	*p = x
	return p
}

func (x Confluence_GetAllSpacesScope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Confluence_GetAllSpacesScope) Descriptor() protoreflect.EnumDescriptor {
	return file_sources_proto_enumTypes[1].Descriptor()
}

func (Confluence_GetAllSpacesScope) Type() protoreflect.EnumType {
	return &file_sources_proto_enumTypes[1]
}

func (x Confluence_GetAllSpacesScope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Confluence_GetAllSpacesScope.Descriptor instead.
func (Confluence_GetAllSpacesScope) EnumDescriptor() ([]byte, []int) {
	return file_sources_proto_rawDescGZIP(), []int{4, 0}
}

type LocalSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         string               `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Name         string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ScanInterval *durationpb.Duration `protobuf:"bytes,3,opt,name=scan_interval,json=scanInterval,proto3" json:"scan_interval,omitempty"`
	Verify       bool                 `protobuf:"varint,4,opt,name=verify,proto3" json:"verify,omitempty"`
	Connection   *anypb.Any           `protobuf:"bytes,5,opt,name=connection,proto3" json:"connection,omitempty"`
}

func (x *LocalSource) Reset() {
	*x = LocalSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sources_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalSource) ProtoMessage() {}

func (x *LocalSource) ProtoReflect() protoreflect.Message {
	mi := &file_sources_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalSource.ProtoReflect.Descriptor instead.
func (*LocalSource) Descriptor() ([]byte, []int) {
	return file_sources_proto_rawDescGZIP(), []int{0}
}

func (x *LocalSource) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *LocalSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LocalSource) GetScanInterval() *durationpb.Duration {
	if x != nil {
		return x.ScanInterval
	}
	return nil
}

func (x *LocalSource) GetVerify() bool {
	if x != nil {
		return x.Verify
	}
	return false
}

func (x *LocalSource) GetConnection() *anypb.Any {
	if x != nil {
		return x.Connection
	}
	return nil
}

type AzureStorage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Credential:
	//	*AzureStorage_ConnectionString
	//	*AzureStorage_BasicAuth
	//	*AzureStorage_ClientCertificate
	//	*AzureStorage_Unauthenticated
	Credential        isAzureStorage_Credential `protobuf_oneof:"credential"`
	StorageContainers []string                  `protobuf:"bytes,5,rep,name=storage_containers,json=storageContainers,proto3" json:"storage_containers,omitempty"`
}

func (x *AzureStorage) Reset() {
	*x = AzureStorage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sources_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AzureStorage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AzureStorage) ProtoMessage() {}

func (x *AzureStorage) ProtoReflect() protoreflect.Message {
	mi := &file_sources_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AzureStorage.ProtoReflect.Descriptor instead.
func (*AzureStorage) Descriptor() ([]byte, []int) {
	return file_sources_proto_rawDescGZIP(), []int{1}
}

func (m *AzureStorage) GetCredential() isAzureStorage_Credential {
	if m != nil {
		return m.Credential
	}
	return nil
}

func (x *AzureStorage) GetConnectionString() string {
	if x, ok := x.GetCredential().(*AzureStorage_ConnectionString); ok {
		return x.ConnectionString
	}
	return ""
}

func (x *AzureStorage) GetBasicAuth() *credentialspb.BasicAuth {
	if x, ok := x.GetCredential().(*AzureStorage_BasicAuth); ok {
		return x.BasicAuth
	}
	return nil
}

func (x *AzureStorage) GetClientCertificate() string {
	if x, ok := x.GetCredential().(*AzureStorage_ClientCertificate); ok {
		return x.ClientCertificate
	}
	return ""
}

func (x *AzureStorage) GetUnauthenticated() *credentialspb.Unauthenticated {
	if x, ok := x.GetCredential().(*AzureStorage_Unauthenticated); ok {
		return x.Unauthenticated
	}
	return nil
}

func (x *AzureStorage) GetStorageContainers() []string {
	if x != nil {
		return x.StorageContainers
	}
	return nil
}

type isAzureStorage_Credential interface {
	isAzureStorage_Credential()
}

type AzureStorage_ConnectionString struct {
	ConnectionString string `protobuf:"bytes,1,opt,name=connection_string,json=connectionString,proto3,oneof"`
}

type AzureStorage_BasicAuth struct {
	BasicAuth *credentialspb.BasicAuth `protobuf:"bytes,2,opt,name=basic_auth,json=basicAuth,proto3,oneof"`
}

type AzureStorage_ClientCertificate struct {
	ClientCertificate string `protobuf:"bytes,3,opt,name=client_certificate,json=clientCertificate,proto3,oneof"`
}

type AzureStorage_Unauthenticated struct {
	Unauthenticated *credentialspb.Unauthenticated `protobuf:"bytes,4,opt,name=unauthenticated,proto3,oneof"`
}

func (*AzureStorage_ConnectionString) isAzureStorage_Credential() {}

func (*AzureStorage_BasicAuth) isAzureStorage_Credential() {}

func (*AzureStorage_ClientCertificate) isAzureStorage_Credential() {}

func (*AzureStorage_Unauthenticated) isAzureStorage_Credential() {}

type Bitbucket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoint string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// Types that are assignable to Credential:
	//	*Bitbucket_Token
	//	*Bitbucket_Oauth
	//	*Bitbucket_BasicAuth
	Credential   isBitbucket_Credential `protobuf_oneof:"credential"`
	Repositories []string               `protobuf:"bytes,5,rep,name=repositories,proto3" json:"repositories,omitempty"`
}

func (x *Bitbucket) Reset() {
	*x = Bitbucket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sources_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bitbucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bitbucket) ProtoMessage() {}

func (x *Bitbucket) ProtoReflect() protoreflect.Message {
	mi := &file_sources_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bitbucket.ProtoReflect.Descriptor instead.
func (*Bitbucket) Descriptor() ([]byte, []int) {
	return file_sources_proto_rawDescGZIP(), []int{2}
}

func (x *Bitbucket) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (m *Bitbucket) GetCredential() isBitbucket_Credential {
	if m != nil {
		return m.Credential
	}
	return nil
}

func (x *Bitbucket) GetToken() string {
	if x, ok := x.GetCredential().(*Bitbucket_Token); ok {
		return x.Token
	}
	return ""
}

func (x *Bitbucket) GetOauth() *credentialspb.Oauth2 {
	if x, ok := x.GetCredential().(*Bitbucket_Oauth); ok {
		return x.Oauth
	}
	return nil
}

func (x *Bitbucket) GetBasicAuth() *credentialspb.BasicAuth {
	if x, ok := x.GetCredential().(*Bitbucket_BasicAuth); ok {
		return x.BasicAuth
	}
	return nil
}

func (x *Bitbucket) GetRepositories() []string {
	if x != nil {
		return x.Repositories
	}
	return nil
}

type isBitbucket_Credential interface {
	isBitbucket_Credential()
}

type Bitbucket_Token struct {
	Token string `protobuf:"bytes,2,opt,name=token,proto3,oneof"`
}

type Bitbucket_Oauth struct {
	Oauth *credentialspb.Oauth2 `protobuf:"bytes,3,opt,name=oauth,proto3,oneof"`
}

type Bitbucket_BasicAuth struct {
	BasicAuth *credentialspb.BasicAuth `protobuf:"bytes,4,opt,name=basic_auth,json=basicAuth,proto3,oneof"`
}

func (*Bitbucket_Token) isBitbucket_Credential() {}

func (*Bitbucket_Oauth) isBitbucket_Credential() {}

func (*Bitbucket_BasicAuth) isBitbucket_Credential() {}

type CircleCI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoint string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// Types that are assignable to Credential:
	//	*CircleCI_Token
	Credential isCircleCI_Credential `protobuf_oneof:"credential"`
}

func (x *CircleCI) Reset() {
	*x = CircleCI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sources_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CircleCI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CircleCI) ProtoMessage() {}

func (x *CircleCI) ProtoReflect() protoreflect.Message {
	mi := &file_sources_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CircleCI.ProtoReflect.Descriptor instead.
func (*CircleCI) Descriptor() ([]byte, []int) {
	return file_sources_proto_rawDescGZIP(), []int{3}
}

func (x *CircleCI) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (m *CircleCI) GetCredential() isCircleCI_Credential {
	if m != nil {
		return m.Credential
	}
	return nil
}

func (x *CircleCI) GetToken() string {
	if x, ok := x.GetCredential().(*CircleCI_Token); ok {
		return x.Token
	}
	return ""
}

type isCircleCI_Credential interface {
	isCircleCI_Credential()
}

type CircleCI_Token struct {
	Token string `protobuf:"bytes,2,opt,name=token,proto3,oneof"`
}

func (*CircleCI_Token) isCircleCI_Credential() {}

type Confluence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoint string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// Types that are assignable to Credential:
	//	*Confluence_Unauthenticated
	//	*Confluence_BasicAuth
	//	*Confluence_Token
	Credential  isConfluence_Credential      `protobuf_oneof:"credential"`
	SpacesScope Confluence_GetAllSpacesScope `protobuf:"varint,5,opt,name=spaces_scope,json=spacesScope,proto3,enum=sources.Confluence_GetAllSpacesScope" json:"spaces_scope,omitempty"`
}

func (x *Confluence) Reset() {
	*x = Confluence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sources_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Confluence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Confluence) ProtoMessage() {}

func (x *Confluence) ProtoReflect() protoreflect.Message {
	mi := &file_sources_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Confluence.ProtoReflect.Descriptor instead.
func (*Confluence) Descriptor() ([]byte, []int) {
	return file_sources_proto_rawDescGZIP(), []int{4}
}

func (x *Confluence) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (m *Confluence) GetCredential() isConfluence_Credential {
	if m != nil {
		return m.Credential
	}
	return nil
}

func (x *Confluence) GetUnauthenticated() *credentialspb.Unauthenticated {
	if x, ok := x.GetCredential().(*Confluence_Unauthenticated); ok {
		return x.Unauthenticated
	}
	return nil
}

func (x *Confluence) GetBasicAuth() *credentialspb.BasicAuth {
	if x, ok := x.GetCredential().(*Confluence_BasicAuth); ok {
		return x.BasicAuth
	}
	return nil
}

func (x *Confluence) GetToken() string {
	if x, ok := x.GetCredential().(*Confluence_Token); ok {
		return x.Token
	}
	return ""
}

func (x *Confluence) GetSpacesScope() Confluence_GetAllSpacesScope {
	if x != nil {
		return x.SpacesScope
	}
	return Confluence_ALL
}

type isConfluence_Credential interface {
	isConfluence_Credential()
}

type Confluence_Unauthenticated struct {
	Unauthenticated *credentialspb.Unauthenticated `protobuf:"bytes,2,opt,name=unauthenticated,proto3,oneof"`
}

type Confluence_BasicAuth struct {
	BasicAuth *credentialspb.BasicAuth `protobuf:"bytes,3,opt,name=basic_auth,json=basicAuth,proto3,oneof"`
}

type Confluence_Token struct {
	Token string `protobuf:"bytes,4,opt,name=token,proto3,oneof"`
}

func (*Confluence_Unauthenticated) isConfluence_Credential() {}

func (*Confluence_BasicAuth) isConfluence_Credential() {}

func (*Confluence_Token) isConfluence_Credential() {}

type DockerHub struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Credential:
	//	*DockerHub_Unauthenticated
	Credential   isDockerHub_Credential `protobuf_oneof:"credential"`
	Repositories []string               `protobuf:"bytes,2,rep,name=repositories,proto3" json:"repositories,omitempty"`
}

func (x *DockerHub) Reset() {
	*x = DockerHub{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sources_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DockerHub) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DockerHub) ProtoMessage() {}

func (x *DockerHub) ProtoReflect() protoreflect.Message {
	mi := &file_sources_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DockerHub.ProtoReflect.Descriptor instead.
func (*DockerHub) Descriptor() ([]byte, []int) {
	return file_sources_proto_rawDescGZIP(), []int{5}
}

func (m *DockerHub) GetCredential() isDockerHub_Credential {
	if m != nil {
		return m.Credential
	}
	return nil
}

func (x *DockerHub) GetUnauthenticated() *credentialspb.Unauthenticated {
	if x, ok := x.GetCredential().(*DockerHub_Unauthenticated); ok {
		return x.Unauthenticated
	}
	return nil
}

func (x *DockerHub) GetRepositories() []string {
	if x != nil {
		return x.Repositories
	}
	return nil
}

type isDockerHub_Credential interface {
	isDockerHub_Credential()
}

type DockerHub_Unauthenticated struct {
	Unauthenticated *credentialspb.Unauthenticated `protobuf:"bytes,1,opt,name=unauthenticated,proto3,oneof"`
}

func (*DockerHub_Unauthenticated) isDockerHub_Credential() {}

type ECR struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Credential:
	//	*ECR_AccessKey
	Credential isECR_Credential `protobuf_oneof:"credential"`
	Registries []string         `protobuf:"bytes,2,rep,name=registries,proto3" json:"registries,omitempty"`
}

func (x *ECR) Reset() {
	*x = ECR{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sources_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ECR) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ECR) ProtoMessage() {}

func (x *ECR) ProtoReflect() protoreflect.Message {
	mi := &file_sources_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ECR.ProtoReflect.Descriptor instead.
func (*ECR) Descriptor() ([]byte, []int) {
	return file_sources_proto_rawDescGZIP(), []int{6}
}

func (m *ECR) GetCredential() isECR_Credential {
	if m != nil {
		return m.Credential
	}
	return nil
}

func (x *ECR) GetAccessKey() *credentialspb.KeySecret {
	if x, ok := x.GetCredential().(*ECR_AccessKey); ok {
		return x.AccessKey
	}
	return nil
}

func (x *ECR) GetRegistries() []string {
	if x != nil {
		return x.Registries
	}
	return nil
}

type isECR_Credential interface {
	isECR_Credential()
}

type ECR_AccessKey struct {
	AccessKey *credentialspb.KeySecret `protobuf:"bytes,1,opt,name=access_key,json=accessKey,proto3,oneof"`
}

func (*ECR_AccessKey) isECR_Credential() {}

type Filesystem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Directories []string `protobuf:"bytes,1,rep,name=directories,proto3" json:"directories,omitempty"`
}

func (x *Filesystem) Reset() {
	*x = Filesystem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sources_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filesystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filesystem) ProtoMessage() {}

func (x *Filesystem) ProtoReflect() protoreflect.Message {
	mi := &file_sources_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filesystem.ProtoReflect.Descriptor instead.
func (*Filesystem) Descriptor() ([]byte, []int) {
	return file_sources_proto_rawDescGZIP(), []int{7}
}

func (x *Filesystem) GetDirectories() []string {
	if x != nil {
		return x.Directories
	}
	return nil
}

type GCS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Credential:
	//	*GCS_JsonSa
	Credential isGCS_Credential `protobuf_oneof:"credential"`
	Buckets    []string         `protobuf:"bytes,2,rep,name=buckets,proto3" json:"buckets,omitempty"`
}

func (x *GCS) Reset() {
	*x = GCS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sources_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GCS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCS) ProtoMessage() {}

func (x *GCS) ProtoReflect() protoreflect.Message {
	mi := &file_sources_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCS.ProtoReflect.Descriptor instead.
func (*GCS) Descriptor() ([]byte, []int) {
	return file_sources_proto_rawDescGZIP(), []int{8}
}

func (m *GCS) GetCredential() isGCS_Credential {
	if m != nil {
		return m.Credential
	}
	return nil
}

func (x *GCS) GetJsonSa() string {
	if x, ok := x.GetCredential().(*GCS_JsonSa); ok {
		return x.JsonSa
	}
	return ""
}

func (x *GCS) GetBuckets() []string {
	if x != nil {
		return x.Buckets
	}
	return nil
}

type isGCS_Credential interface {
	isGCS_Credential()
}

type GCS_JsonSa struct {
	JsonSa string `protobuf:"bytes,1,opt,name=json_sa,json=jsonSa,proto3,oneof"`
}

func (*GCS_JsonSa) isGCS_Credential() {}

type Git struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Credential:
	//	*Git_BasicAuth
	//	*Git_Unauthenticated
	Credential   isGit_Credential `protobuf_oneof:"credential"`
	Directories  []string         `protobuf:"bytes,3,rep,name=directories,proto3" json:"directories,omitempty"`
	Repositories []string         `protobuf:"bytes,4,rep,name=repositories,proto3" json:"repositories,omitempty"`
}

func (x *Git) Reset() {
	*x = Git{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sources_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Git) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Git) ProtoMessage() {}

func (x *Git) ProtoReflect() protoreflect.Message {
	mi := &file_sources_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Git.ProtoReflect.Descriptor instead.
func (*Git) Descriptor() ([]byte, []int) {
	return file_sources_proto_rawDescGZIP(), []int{9}
}

func (m *Git) GetCredential() isGit_Credential {
	if m != nil {
		return m.Credential
	}
	return nil
}

func (x *Git) GetBasicAuth() *credentialspb.BasicAuth {
	if x, ok := x.GetCredential().(*Git_BasicAuth); ok {
		return x.BasicAuth
	}
	return nil
}

func (x *Git) GetUnauthenticated() *credentialspb.Unauthenticated {
	if x, ok := x.GetCredential().(*Git_Unauthenticated); ok {
		return x.Unauthenticated
	}
	return nil
}

func (x *Git) GetDirectories() []string {
	if x != nil {
		return x.Directories
	}
	return nil
}

func (x *Git) GetRepositories() []string {
	if x != nil {
		return x.Repositories
	}
	return nil
}

type isGit_Credential interface {
	isGit_Credential()
}

type Git_BasicAuth struct {
	BasicAuth *credentialspb.BasicAuth `protobuf:"bytes,1,opt,name=basic_auth,json=basicAuth,proto3,oneof"`
}

type Git_Unauthenticated struct {
	Unauthenticated *credentialspb.Unauthenticated `protobuf:"bytes,2,opt,name=unauthenticated,proto3,oneof"`
}

func (*Git_BasicAuth) isGit_Credential() {}

func (*Git_Unauthenticated) isGit_Credential() {}

type GitLab struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoint string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// Types that are assignable to Credential:
	//	*GitLab_Token
	//	*GitLab_Oauth
	//	*GitLab_BasicAuth
	Credential   isGitLab_Credential `protobuf_oneof:"credential"`
	Repositories []string            `protobuf:"bytes,5,rep,name=repositories,proto3" json:"repositories,omitempty"`
}

func (x *GitLab) Reset() {
	*x = GitLab{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sources_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitLab) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitLab) ProtoMessage() {}

func (x *GitLab) ProtoReflect() protoreflect.Message {
	mi := &file_sources_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitLab.ProtoReflect.Descriptor instead.
func (*GitLab) Descriptor() ([]byte, []int) {
	return file_sources_proto_rawDescGZIP(), []int{10}
}

func (x *GitLab) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (m *GitLab) GetCredential() isGitLab_Credential {
	if m != nil {
		return m.Credential
	}
	return nil
}

func (x *GitLab) GetToken() string {
	if x, ok := x.GetCredential().(*GitLab_Token); ok {
		return x.Token
	}
	return ""
}

func (x *GitLab) GetOauth() *credentialspb.Oauth2 {
	if x, ok := x.GetCredential().(*GitLab_Oauth); ok {
		return x.Oauth
	}
	return nil
}

func (x *GitLab) GetBasicAuth() *credentialspb.BasicAuth {
	if x, ok := x.GetCredential().(*GitLab_BasicAuth); ok {
		return x.BasicAuth
	}
	return nil
}

func (x *GitLab) GetRepositories() []string {
	if x != nil {
		return x.Repositories
	}
	return nil
}

type isGitLab_Credential interface {
	isGitLab_Credential()
}

type GitLab_Token struct {
	Token string `protobuf:"bytes,2,opt,name=token,proto3,oneof"`
}

type GitLab_Oauth struct {
	Oauth *credentialspb.Oauth2 `protobuf:"bytes,3,opt,name=oauth,proto3,oneof"`
}

type GitLab_BasicAuth struct {
	BasicAuth *credentialspb.BasicAuth `protobuf:"bytes,4,opt,name=basic_auth,json=basicAuth,proto3,oneof"`
}

func (*GitLab_Token) isGitLab_Credential() {}

func (*GitLab_Oauth) isGitLab_Credential() {}

func (*GitLab_BasicAuth) isGitLab_Credential() {}

type GitHub struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoint string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// Types that are assignable to Credential:
	//	*GitHub_GithubApp
	//	*GitHub_Token
	//	*GitHub_Unauthenticated
	Credential    isGitHub_Credential `protobuf_oneof:"credential"`
	Repositories  []string            `protobuf:"bytes,5,rep,name=repositories,proto3" json:"repositories,omitempty"`
	Organizations []string            `protobuf:"bytes,6,rep,name=organizations,proto3" json:"organizations,omitempty"`
	ScanUsers     bool                `protobuf:"varint,7,opt,name=scanUsers,proto3" json:"scanUsers,omitempty"`
	IncludeForks  bool                `protobuf:"varint,8,opt,name=includeForks,proto3" json:"includeForks,omitempty"`
	Head          string              `protobuf:"bytes,9,opt,name=head,proto3" json:"head,omitempty"`
	Base          string              `protobuf:"bytes,10,opt,name=base,proto3" json:"base,omitempty"`
}

func (x *GitHub) Reset() {
	*x = GitHub{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sources_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitHub) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitHub) ProtoMessage() {}

func (x *GitHub) ProtoReflect() protoreflect.Message {
	mi := &file_sources_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitHub.ProtoReflect.Descriptor instead.
func (*GitHub) Descriptor() ([]byte, []int) {
	return file_sources_proto_rawDescGZIP(), []int{11}
}

func (x *GitHub) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (m *GitHub) GetCredential() isGitHub_Credential {
	if m != nil {
		return m.Credential
	}
	return nil
}

func (x *GitHub) GetGithubApp() *credentialspb.GitHubApp {
	if x, ok := x.GetCredential().(*GitHub_GithubApp); ok {
		return x.GithubApp
	}
	return nil
}

func (x *GitHub) GetToken() string {
	if x, ok := x.GetCredential().(*GitHub_Token); ok {
		return x.Token
	}
	return ""
}

func (x *GitHub) GetUnauthenticated() *credentialspb.Unauthenticated {
	if x, ok := x.GetCredential().(*GitHub_Unauthenticated); ok {
		return x.Unauthenticated
	}
	return nil
}

func (x *GitHub) GetRepositories() []string {
	if x != nil {
		return x.Repositories
	}
	return nil
}

func (x *GitHub) GetOrganizations() []string {
	if x != nil {
		return x.Organizations
	}
	return nil
}

func (x *GitHub) GetScanUsers() bool {
	if x != nil {
		return x.ScanUsers
	}
	return false
}

func (x *GitHub) GetIncludeForks() bool {
	if x != nil {
		return x.IncludeForks
	}
	return false
}

func (x *GitHub) GetHead() string {
	if x != nil {
		return x.Head
	}
	return ""
}

func (x *GitHub) GetBase() string {
	if x != nil {
		return x.Base
	}
	return ""
}

type isGitHub_Credential interface {
	isGitHub_Credential()
}

type GitHub_GithubApp struct {
	GithubApp *credentialspb.GitHubApp `protobuf:"bytes,2,opt,name=github_app,json=githubApp,proto3,oneof"`
}

type GitHub_Token struct {
	Token string `protobuf:"bytes,3,opt,name=token,proto3,oneof"`
}

type GitHub_Unauthenticated struct {
	Unauthenticated *credentialspb.Unauthenticated `protobuf:"bytes,4,opt,name=unauthenticated,proto3,oneof"`
}

func (*GitHub_GithubApp) isGitHub_Credential() {}

func (*GitHub_Token) isGitHub_Credential() {}

func (*GitHub_Unauthenticated) isGitHub_Credential() {}

type JIRA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoint string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// Types that are assignable to Credential:
	//	*JIRA_BasicAuth
	//	*JIRA_Unauthenticated
	//	*JIRA_Oauth
	Credential isJIRA_Credential `protobuf_oneof:"credential"`
	Projects   []string          `protobuf:"bytes,5,rep,name=projects,proto3" json:"projects,omitempty"`
}

func (x *JIRA) Reset() {
	*x = JIRA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sources_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JIRA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JIRA) ProtoMessage() {}

func (x *JIRA) ProtoReflect() protoreflect.Message {
	mi := &file_sources_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JIRA.ProtoReflect.Descriptor instead.
func (*JIRA) Descriptor() ([]byte, []int) {
	return file_sources_proto_rawDescGZIP(), []int{12}
}

func (x *JIRA) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (m *JIRA) GetCredential() isJIRA_Credential {
	if m != nil {
		return m.Credential
	}
	return nil
}

func (x *JIRA) GetBasicAuth() *credentialspb.BasicAuth {
	if x, ok := x.GetCredential().(*JIRA_BasicAuth); ok {
		return x.BasicAuth
	}
	return nil
}

func (x *JIRA) GetUnauthenticated() *credentialspb.Unauthenticated {
	if x, ok := x.GetCredential().(*JIRA_Unauthenticated); ok {
		return x.Unauthenticated
	}
	return nil
}

func (x *JIRA) GetOauth() *credentialspb.Oauth2 {
	if x, ok := x.GetCredential().(*JIRA_Oauth); ok {
		return x.Oauth
	}
	return nil
}

func (x *JIRA) GetProjects() []string {
	if x != nil {
		return x.Projects
	}
	return nil
}

type isJIRA_Credential interface {
	isJIRA_Credential()
}

type JIRA_BasicAuth struct {
	BasicAuth *credentialspb.BasicAuth `protobuf:"bytes,2,opt,name=basic_auth,json=basicAuth,proto3,oneof"`
}

type JIRA_Unauthenticated struct {
	Unauthenticated *credentialspb.Unauthenticated `protobuf:"bytes,3,opt,name=unauthenticated,proto3,oneof"`
}

type JIRA_Oauth struct {
	Oauth *credentialspb.Oauth2 `protobuf:"bytes,4,opt,name=oauth,proto3,oneof"`
}

func (*JIRA_BasicAuth) isJIRA_Credential() {}

func (*JIRA_Unauthenticated) isJIRA_Credential() {}

func (*JIRA_Oauth) isJIRA_Credential() {}

type NPMUnauthenticatedPackage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Credential:
	//	*NPMUnauthenticatedPackage_Unauthenticated
	Credential isNPMUnauthenticatedPackage_Credential `protobuf_oneof:"credential"`
}

func (x *NPMUnauthenticatedPackage) Reset() {
	*x = NPMUnauthenticatedPackage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sources_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NPMUnauthenticatedPackage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NPMUnauthenticatedPackage) ProtoMessage() {}

func (x *NPMUnauthenticatedPackage) ProtoReflect() protoreflect.Message {
	mi := &file_sources_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NPMUnauthenticatedPackage.ProtoReflect.Descriptor instead.
func (*NPMUnauthenticatedPackage) Descriptor() ([]byte, []int) {
	return file_sources_proto_rawDescGZIP(), []int{13}
}

func (m *NPMUnauthenticatedPackage) GetCredential() isNPMUnauthenticatedPackage_Credential {
	if m != nil {
		return m.Credential
	}
	return nil
}

func (x *NPMUnauthenticatedPackage) GetUnauthenticated() *credentialspb.Unauthenticated {
	if x, ok := x.GetCredential().(*NPMUnauthenticatedPackage_Unauthenticated); ok {
		return x.Unauthenticated
	}
	return nil
}

type isNPMUnauthenticatedPackage_Credential interface {
	isNPMUnauthenticatedPackage_Credential()
}

type NPMUnauthenticatedPackage_Unauthenticated struct {
	Unauthenticated *credentialspb.Unauthenticated `protobuf:"bytes,1,opt,name=unauthenticated,proto3,oneof"`
}

func (*NPMUnauthenticatedPackage_Unauthenticated) isNPMUnauthenticatedPackage_Credential() {}

type PyPIUnauthenticatedPackage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Credential:
	//	*PyPIUnauthenticatedPackage_Unauthenticated
	Credential isPyPIUnauthenticatedPackage_Credential `protobuf_oneof:"credential"`
}

func (x *PyPIUnauthenticatedPackage) Reset() {
	*x = PyPIUnauthenticatedPackage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sources_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PyPIUnauthenticatedPackage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PyPIUnauthenticatedPackage) ProtoMessage() {}

func (x *PyPIUnauthenticatedPackage) ProtoReflect() protoreflect.Message {
	mi := &file_sources_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PyPIUnauthenticatedPackage.ProtoReflect.Descriptor instead.
func (*PyPIUnauthenticatedPackage) Descriptor() ([]byte, []int) {
	return file_sources_proto_rawDescGZIP(), []int{14}
}

func (m *PyPIUnauthenticatedPackage) GetCredential() isPyPIUnauthenticatedPackage_Credential {
	if m != nil {
		return m.Credential
	}
	return nil
}

func (x *PyPIUnauthenticatedPackage) GetUnauthenticated() *credentialspb.Unauthenticated {
	if x, ok := x.GetCredential().(*PyPIUnauthenticatedPackage_Unauthenticated); ok {
		return x.Unauthenticated
	}
	return nil
}

type isPyPIUnauthenticatedPackage_Credential interface {
	isPyPIUnauthenticatedPackage_Credential()
}

type PyPIUnauthenticatedPackage_Unauthenticated struct {
	Unauthenticated *credentialspb.Unauthenticated `protobuf:"bytes,1,opt,name=unauthenticated,proto3,oneof"`
}

func (*PyPIUnauthenticatedPackage_Unauthenticated) isPyPIUnauthenticatedPackage_Credential() {}

type S3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Credential:
	//	*S3_AccessKey
	//	*S3_Unauthenticated
	//	*S3_CloudEnvironment
	Credential isS3_Credential `protobuf_oneof:"credential"`
	Buckets    []string        `protobuf:"bytes,3,rep,name=buckets,proto3" json:"buckets,omitempty"`
}

func (x *S3) Reset() {
	*x = S3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sources_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3) ProtoMessage() {}

func (x *S3) ProtoReflect() protoreflect.Message {
	mi := &file_sources_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3.ProtoReflect.Descriptor instead.
func (*S3) Descriptor() ([]byte, []int) {
	return file_sources_proto_rawDescGZIP(), []int{15}
}

func (m *S3) GetCredential() isS3_Credential {
	if m != nil {
		return m.Credential
	}
	return nil
}

func (x *S3) GetAccessKey() *credentialspb.KeySecret {
	if x, ok := x.GetCredential().(*S3_AccessKey); ok {
		return x.AccessKey
	}
	return nil
}

func (x *S3) GetUnauthenticated() *credentialspb.Unauthenticated {
	if x, ok := x.GetCredential().(*S3_Unauthenticated); ok {
		return x.Unauthenticated
	}
	return nil
}

func (x *S3) GetCloudEnvironment() *credentialspb.CloudEnvironment {
	if x, ok := x.GetCredential().(*S3_CloudEnvironment); ok {
		return x.CloudEnvironment
	}
	return nil
}

func (x *S3) GetBuckets() []string {
	if x != nil {
		return x.Buckets
	}
	return nil
}

type isS3_Credential interface {
	isS3_Credential()
}

type S3_AccessKey struct {
	AccessKey *credentialspb.KeySecret `protobuf:"bytes,1,opt,name=access_key,json=accessKey,proto3,oneof"`
}

type S3_Unauthenticated struct {
	Unauthenticated *credentialspb.Unauthenticated `protobuf:"bytes,2,opt,name=unauthenticated,proto3,oneof"`
}

type S3_CloudEnvironment struct {
	CloudEnvironment *credentialspb.CloudEnvironment `protobuf:"bytes,4,opt,name=cloud_environment,json=cloudEnvironment,proto3,oneof"`
}

func (*S3_AccessKey) isS3_Credential() {}

func (*S3_Unauthenticated) isS3_Credential() {}

func (*S3_CloudEnvironment) isS3_Credential() {}

type Slack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoint string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// Types that are assignable to Credential:
	//	*Slack_Token
	Credential isSlack_Credential `protobuf_oneof:"credential"`
	Channels   []string           `protobuf:"bytes,3,rep,name=channels,proto3" json:"channels,omitempty"`
	IgnoreList []string           `protobuf:"bytes,4,rep,name=ignoreList,proto3" json:"ignoreList,omitempty"`
}

func (x *Slack) Reset() {
	*x = Slack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sources_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slack) ProtoMessage() {}

func (x *Slack) ProtoReflect() protoreflect.Message {
	mi := &file_sources_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slack.ProtoReflect.Descriptor instead.
func (*Slack) Descriptor() ([]byte, []int) {
	return file_sources_proto_rawDescGZIP(), []int{16}
}

func (x *Slack) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (m *Slack) GetCredential() isSlack_Credential {
	if m != nil {
		return m.Credential
	}
	return nil
}

func (x *Slack) GetToken() string {
	if x, ok := x.GetCredential().(*Slack_Token); ok {
		return x.Token
	}
	return ""
}

func (x *Slack) GetChannels() []string {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *Slack) GetIgnoreList() []string {
	if x != nil {
		return x.IgnoreList
	}
	return nil
}

type isSlack_Credential interface {
	isSlack_Credential()
}

type Slack_Token struct {
	Token string `protobuf:"bytes,2,opt,name=token,proto3,oneof"`
}

func (*Slack_Token) isSlack_Credential() {}

type Test struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Test) Reset() {
	*x = Test{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sources_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Test) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Test) ProtoMessage() {}

func (x *Test) ProtoReflect() protoreflect.Message {
	mi := &file_sources_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Test.ProtoReflect.Descriptor instead.
func (*Test) Descriptor() ([]byte, []int) {
	return file_sources_proto_rawDescGZIP(), []int{17}
}

type Buildkite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Credential:
	//	*Buildkite_Token
	Credential isBuildkite_Credential `protobuf_oneof:"credential"`
}

func (x *Buildkite) Reset() {
	*x = Buildkite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sources_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Buildkite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Buildkite) ProtoMessage() {}

func (x *Buildkite) ProtoReflect() protoreflect.Message {
	mi := &file_sources_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Buildkite.ProtoReflect.Descriptor instead.
func (*Buildkite) Descriptor() ([]byte, []int) {
	return file_sources_proto_rawDescGZIP(), []int{18}
}

func (m *Buildkite) GetCredential() isBuildkite_Credential {
	if m != nil {
		return m.Credential
	}
	return nil
}

func (x *Buildkite) GetToken() string {
	if x, ok := x.GetCredential().(*Buildkite_Token); ok {
		return x.Token
	}
	return ""
}

type isBuildkite_Credential interface {
	isBuildkite_Credential()
}

type Buildkite_Token struct {
	Token string `protobuf:"bytes,1,opt,name=token,proto3,oneof"`
}

func (*Buildkite_Token) isBuildkite_Credential() {}

type Gerrit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoint string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// Types that are assignable to Credential:
	//	*Gerrit_BasicAuth
	//	*Gerrit_Unauthenticated
	Credential isGerrit_Credential `protobuf_oneof:"credential"`
	Projects   []string            `protobuf:"bytes,4,rep,name=projects,proto3" json:"projects,omitempty"`
}

func (x *Gerrit) Reset() {
	*x = Gerrit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sources_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Gerrit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gerrit) ProtoMessage() {}

func (x *Gerrit) ProtoReflect() protoreflect.Message {
	mi := &file_sources_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gerrit.ProtoReflect.Descriptor instead.
func (*Gerrit) Descriptor() ([]byte, []int) {
	return file_sources_proto_rawDescGZIP(), []int{19}
}

func (x *Gerrit) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (m *Gerrit) GetCredential() isGerrit_Credential {
	if m != nil {
		return m.Credential
	}
	return nil
}

func (x *Gerrit) GetBasicAuth() *credentialspb.BasicAuth {
	if x, ok := x.GetCredential().(*Gerrit_BasicAuth); ok {
		return x.BasicAuth
	}
	return nil
}

func (x *Gerrit) GetUnauthenticated() *credentialspb.Unauthenticated {
	if x, ok := x.GetCredential().(*Gerrit_Unauthenticated); ok {
		return x.Unauthenticated
	}
	return nil
}

func (x *Gerrit) GetProjects() []string {
	if x != nil {
		return x.Projects
	}
	return nil
}

type isGerrit_Credential interface {
	isGerrit_Credential()
}

type Gerrit_BasicAuth struct {
	BasicAuth *credentialspb.BasicAuth `protobuf:"bytes,2,opt,name=basic_auth,json=basicAuth,proto3,oneof"`
}

type Gerrit_Unauthenticated struct {
	Unauthenticated *credentialspb.Unauthenticated `protobuf:"bytes,3,opt,name=unauthenticated,proto3,oneof"`
}

func (*Gerrit_BasicAuth) isGerrit_Credential() {}

func (*Gerrit_Unauthenticated) isGerrit_Credential() {}

type Jenkins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoint string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// Types that are assignable to Credential:
	//	*Jenkins_BasicAuth
	//	*Jenkins_Header
	Credential isJenkins_Credential `protobuf_oneof:"credential"`
}

func (x *Jenkins) Reset() {
	*x = Jenkins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sources_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Jenkins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Jenkins) ProtoMessage() {}

func (x *Jenkins) ProtoReflect() protoreflect.Message {
	mi := &file_sources_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Jenkins.ProtoReflect.Descriptor instead.
func (*Jenkins) Descriptor() ([]byte, []int) {
	return file_sources_proto_rawDescGZIP(), []int{20}
}

func (x *Jenkins) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (m *Jenkins) GetCredential() isJenkins_Credential {
	if m != nil {
		return m.Credential
	}
	return nil
}

func (x *Jenkins) GetBasicAuth() *credentialspb.BasicAuth {
	if x, ok := x.GetCredential().(*Jenkins_BasicAuth); ok {
		return x.BasicAuth
	}
	return nil
}

func (x *Jenkins) GetHeader() *credentialspb.Header {
	if x, ok := x.GetCredential().(*Jenkins_Header); ok {
		return x.Header
	}
	return nil
}

type isJenkins_Credential interface {
	isJenkins_Credential()
}

type Jenkins_BasicAuth struct {
	BasicAuth *credentialspb.BasicAuth `protobuf:"bytes,2,opt,name=basic_auth,json=basicAuth,proto3,oneof"`
}

type Jenkins_Header struct {
	Header *credentialspb.Header `protobuf:"bytes,3,opt,name=header,proto3,oneof"`
}

func (*Jenkins_BasicAuth) isJenkins_Credential() {}

func (*Jenkins_Header) isJenkins_Credential() {}

type Teams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoint string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// Types that are assignable to Credential:
	//	*Teams_Token
	//	*Teams_Authenticated
	Credential isTeams_Credential `protobuf_oneof:"credential"`
	Channels   []string           `protobuf:"bytes,4,rep,name=channels,proto3" json:"channels,omitempty"`
	IgnoreList []string           `protobuf:"bytes,5,rep,name=ignoreList,proto3" json:"ignoreList,omitempty"`
	TeamId     string             `protobuf:"bytes,6,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
}

func (x *Teams) Reset() {
	*x = Teams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sources_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Teams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Teams) ProtoMessage() {}

func (x *Teams) ProtoReflect() protoreflect.Message {
	mi := &file_sources_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Teams.ProtoReflect.Descriptor instead.
func (*Teams) Descriptor() ([]byte, []int) {
	return file_sources_proto_rawDescGZIP(), []int{21}
}

func (x *Teams) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (m *Teams) GetCredential() isTeams_Credential {
	if m != nil {
		return m.Credential
	}
	return nil
}

func (x *Teams) GetToken() string {
	if x, ok := x.GetCredential().(*Teams_Token); ok {
		return x.Token
	}
	return ""
}

func (x *Teams) GetAuthenticated() *credentialspb.ClientCredentials {
	if x, ok := x.GetCredential().(*Teams_Authenticated); ok {
		return x.Authenticated
	}
	return nil
}

func (x *Teams) GetChannels() []string {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *Teams) GetIgnoreList() []string {
	if x != nil {
		return x.IgnoreList
	}
	return nil
}

func (x *Teams) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

type isTeams_Credential interface {
	isTeams_Credential()
}

type Teams_Token struct {
	Token string `protobuf:"bytes,2,opt,name=token,proto3,oneof"`
}

type Teams_Authenticated struct {
	Authenticated *credentialspb.ClientCredentials `protobuf:"bytes,3,opt,name=authenticated,proto3,oneof"`
}

func (*Teams_Token) isTeams_Credential() {}

func (*Teams_Authenticated) isTeams_Credential() {}

// https://www.jfrog.com/confluence/display/JFROG/Artifactory+REST+API#ArtifactoryRESTAPI-RetrieveFolderorRepositoryArchive
type Artifactory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoint string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// Types that are assignable to Credential:
	//	*Artifactory_BasicAuth
	//	*Artifactory_AccessToken
	Credential   isArtifactory_Credential `protobuf_oneof:"credential"`
	Repositories []string                 `protobuf:"bytes,4,rep,name=repositories,proto3" json:"repositories,omitempty"`
}

func (x *Artifactory) Reset() {
	*x = Artifactory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sources_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Artifactory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Artifactory) ProtoMessage() {}

func (x *Artifactory) ProtoReflect() protoreflect.Message {
	mi := &file_sources_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Artifactory.ProtoReflect.Descriptor instead.
func (*Artifactory) Descriptor() ([]byte, []int) {
	return file_sources_proto_rawDescGZIP(), []int{22}
}

func (x *Artifactory) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (m *Artifactory) GetCredential() isArtifactory_Credential {
	if m != nil {
		return m.Credential
	}
	return nil
}

func (x *Artifactory) GetBasicAuth() *credentialspb.BasicAuth {
	if x, ok := x.GetCredential().(*Artifactory_BasicAuth); ok {
		return x.BasicAuth
	}
	return nil
}

func (x *Artifactory) GetAccessToken() string {
	if x, ok := x.GetCredential().(*Artifactory_AccessToken); ok {
		return x.AccessToken
	}
	return ""
}

func (x *Artifactory) GetRepositories() []string {
	if x != nil {
		return x.Repositories
	}
	return nil
}

type isArtifactory_Credential interface {
	isArtifactory_Credential()
}

type Artifactory_BasicAuth struct {
	BasicAuth *credentialspb.BasicAuth `protobuf:"bytes,2,opt,name=basic_auth,json=basicAuth,proto3,oneof"`
}

type Artifactory_AccessToken struct {
	AccessToken string `protobuf:"bytes,3,opt,name=access_token,json=accessToken,proto3,oneof"`
}

func (*Artifactory_BasicAuth) isArtifactory_Credential() {}

func (*Artifactory_AccessToken) isArtifactory_Credential() {}

type Syslog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Protocol      string `protobuf:"bytes,1,opt,name=protocol,proto3" json:"protocol,omitempty"`
	ListenAddress string `protobuf:"bytes,2,opt,name=listenAddress,proto3" json:"listenAddress,omitempty"`
	TlsCert       string `protobuf:"bytes,3,opt,name=tlsCert,proto3" json:"tlsCert,omitempty"`
	TlsKey        string `protobuf:"bytes,4,opt,name=tlsKey,proto3" json:"tlsKey,omitempty"`
	Format        string `protobuf:"bytes,5,opt,name=format,proto3" json:"format,omitempty"`
}

func (x *Syslog) Reset() {
	*x = Syslog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sources_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Syslog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Syslog) ProtoMessage() {}

func (x *Syslog) ProtoReflect() protoreflect.Message {
	mi := &file_sources_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Syslog.ProtoReflect.Descriptor instead.
func (*Syslog) Descriptor() ([]byte, []int) {
	return file_sources_proto_rawDescGZIP(), []int{23}
}

func (x *Syslog) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *Syslog) GetListenAddress() string {
	if x != nil {
		return x.ListenAddress
	}
	return ""
}

func (x *Syslog) GetTlsCert() string {
	if x != nil {
		return x.TlsCert
	}
	return ""
}

func (x *Syslog) GetTlsKey() string {
	if x != nil {
		return x.TlsKey
	}
	return ""
}

func (x *Syslog) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

var File_sources_proto protoreflect.FileDescriptor

var file_sources_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x11, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xc3, 0x01, 0x0a, 0x0b, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x73, 0x63, 0x61, 0x6e, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x63, 0x61, 0x6e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12,
	0x34, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xae, 0x02, 0x0a, 0x0c, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x37, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74,
	0x68, 0x48, 0x00, 0x52, 0x09, 0x62, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x12, 0x2f,
	0x0a, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x11, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12,
	0x48, 0x0a, 0x0f, 0x75, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0f, 0x75, 0x6e, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0xe1, 0x01, 0x0a, 0x09, 0x42, 0x69, 0x74, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x12, 0x24, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x90, 0x01, 0x01,
	0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x2b, 0x0a, 0x05, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e,
	0x4f, 0x61, 0x75, 0x74, 0x68, 0x32, 0x48, 0x00, 0x52, 0x05, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x12,
	0x37, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x48, 0x00, 0x52, 0x09, 0x62,
	0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x42, 0x0c, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0x56, 0x0a, 0x08, 0x43, 0x69,
	0x72, 0x63, 0x6c, 0x65, 0x43, 0x49, 0x12, 0x24, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x90,
	0x01, 0x01, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x22, 0xdd, 0x02, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x24, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x90, 0x01, 0x01, 0x52, 0x08, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x0f, 0x75, 0x6e, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x55,
	0x6e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00,
	0x52, 0x0f, 0x75, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x37, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x48, 0x00, 0x52,
	0x09, 0x62, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x48, 0x0a, 0x0c, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52,
	0x0b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x22, 0x36, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x4c,
	0x4f, 0x42, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e,
	0x41, 0x4c, 0x10, 0x02, 0x42, 0x0c, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x22, 0x87, 0x01, 0x0a, 0x09, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x48, 0x75, 0x62,
	0x12, 0x48, 0x0a, 0x0f, 0x75, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0f, 0x75, 0x6e, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x42, 0x0c,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0x6c, 0x0a, 0x03,
	0x45, 0x43, 0x52, 0x12, 0x37, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x48,
	0x00, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x69, 0x65, 0x73, 0x42, 0x0c, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0x2e, 0x0a, 0x0a, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0x48, 0x0a, 0x03, 0x47, 0x43,
	0x53, 0x12, 0x19, 0x0a, 0x07, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x73, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x6a, 0x73, 0x6f, 0x6e, 0x53, 0x61, 0x12, 0x18, 0x0a, 0x07,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x22, 0xdc, 0x01, 0x0a, 0x03, 0x47, 0x69, 0x74, 0x12, 0x37, 0x0a, 0x0a,
	0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x48, 0x00, 0x52, 0x09, 0x62, 0x61, 0x73, 0x69,
	0x63, 0x41, 0x75, 0x74, 0x68, 0x12, 0x48, 0x0a, 0x0f, 0x75, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x55, 0x6e, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0f,
	0x75, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x22, 0xde, 0x01, 0x0a, 0x06, 0x47, 0x69, 0x74, 0x4c, 0x61, 0x62, 0x12, 0x24,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x90, 0x01, 0x01, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2b, 0x0a, 0x05,
	0x6f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x32,
	0x48, 0x00, 0x52, 0x05, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x12, 0x37, 0x0a, 0x0a, 0x62, 0x61, 0x73,
	0x69, 0x63, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x41, 0x75, 0x74, 0x68, 0x48, 0x00, 0x52, 0x09, 0x62, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75,
	0x74, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x22, 0x8b, 0x03, 0x0a, 0x06, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x12,
	0x24, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x90, 0x01, 0x01, 0x52, 0x08, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f,
	0x61, 0x70, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x41, 0x70,
	0x70, 0x48, 0x00, 0x52, 0x09, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x41, 0x70, 0x70, 0x12, 0x16,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x48, 0x0a, 0x0f, 0x75, 0x6e, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x55, 0x6e,
	0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52,
	0x0f, 0x75, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x63,
	0x61, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73,
	0x63, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x65, 0x61, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x62, 0x61, 0x73, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x22, 0x86, 0x02, 0x0a, 0x04, 0x4a, 0x49, 0x52, 0x41, 0x12, 0x24, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x72, 0x03, 0x90, 0x01, 0x01, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x37, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x48, 0x00, 0x52,
	0x09, 0x62, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x12, 0x48, 0x0a, 0x0f, 0x75, 0x6e,
	0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x2e, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x48, 0x00, 0x52, 0x0f, 0x75, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x05, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x2e, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x32, 0x48, 0x00, 0x52, 0x05, 0x6f, 0x61, 0x75, 0x74,
	0x68, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x42, 0x0c, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0x73, 0x0a, 0x19, 0x4e,
	0x50, 0x4d, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x48, 0x0a, 0x0f, 0x75, 0x6e, 0x61, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e,
	0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x48,
	0x00, 0x52, 0x0f, 0x75, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x22, 0x74, 0x0a, 0x1a, 0x50, 0x79, 0x50, 0x49, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x48,
	0x0a, 0x0f, 0x75, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0f, 0x75, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0xfd, 0x01, 0x0a, 0x02, 0x53, 0x33, 0x12, 0x37, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e,
	0x4b, 0x65, 0x79, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x48, 0x0a, 0x0f, 0x75, 0x6e, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x55, 0x6e,
	0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52,
	0x0f, 0x75, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x4c, 0x0a, 0x11, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0x8f, 0x01, 0x0a, 0x05, 0x53, 0x6c, 0x61, 0x63, 0x6b,
	0x12, 0x24, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x90, 0x01, 0x01, 0x52, 0x08, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x67,
	0x6e, 0x6f, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0x06, 0x0a, 0x04, 0x54, 0x65, 0x73, 0x74,
	0x22, 0x31, 0x0a, 0x09, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x6b, 0x69, 0x74, 0x65, 0x12, 0x16, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x22, 0xdb, 0x01, 0x0a, 0x06, 0x47, 0x65, 0x72, 0x72, 0x69, 0x74, 0x12, 0x24,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x90, 0x01, 0x01, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68,
	0x48, 0x00, 0x52, 0x09, 0x62, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x12, 0x48, 0x0a,
	0x0f, 0x75, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x2e, 0x55, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0f, 0x75, 0x6e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x22, 0xa5, 0x01, 0x0a, 0x07, 0x4a, 0x65, 0x6e, 0x6b, 0x69, 0x6e, 0x73, 0x12, 0x24, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x90, 0x01, 0x01, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x48,
	0x00, 0x52, 0x09, 0x62, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x12, 0x2d, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0xf0, 0x01, 0x0a, 0x05, 0x54, 0x65,
	0x61, 0x6d, 0x73, 0x12, 0x24, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x90, 0x01, 0x01, 0x52,
	0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x46, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x42, 0x0c,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0xc3, 0x01, 0x0a,
	0x0b, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x24, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x72, 0x03, 0x90, 0x01, 0x01, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x61, 0x75, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x48, 0x00,
	0x52, 0x09, 0x62, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0c, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x22, 0x94, 0x01, 0x0a, 0x06, 0x53, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x6c, 0x73, 0x43, 0x65, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x6c, 0x73, 0x43, 0x65, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6c, 0x73,
	0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6c, 0x73, 0x4b, 0x65,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2a, 0xd0, 0x05, 0x0a, 0x0a, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x5a, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x54,
	0x4f, 0x52, 0x41, 0x47, 0x45, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x49, 0x54, 0x42, 0x55, 0x43, 0x4b, 0x45, 0x54,
	0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x49, 0x52, 0x43, 0x4c, 0x45, 0x43, 0x49, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x4c, 0x55, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x4f, 0x43, 0x4b, 0x45, 0x52, 0x48, 0x55,
	0x42, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x53, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x43, 0x52, 0x10, 0x05, 0x12,
	0x13, 0x0a, 0x0f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47,
	0x43, 0x53, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x47, 0x49, 0x54, 0x48, 0x55, 0x42, 0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x55, 0x42, 0x4c,
	0x49, 0x43, 0x5f, 0x47, 0x49, 0x54, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x49, 0x54, 0x4c, 0x41, 0x42, 0x10, 0x09,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4a, 0x49, 0x52, 0x41, 0x10, 0x0a, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x50, 0x4d, 0x5f, 0x55, 0x4e, 0x41, 0x55, 0x54, 0x48,
	0x44, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x53, 0x10, 0x0b, 0x12, 0x25, 0x0a, 0x21,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x59, 0x50, 0x49,
	0x5f, 0x55, 0x4e, 0x41, 0x55, 0x54, 0x48, 0x44, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45,
	0x53, 0x10, 0x0c, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x33, 0x10, 0x0d, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4c, 0x41, 0x43, 0x4b, 0x10, 0x0e, 0x12, 0x1a,
	0x0a, 0x16, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49,
	0x4c, 0x45, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x0f, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x49, 0x54, 0x10, 0x10, 0x12,
	0x14, 0x0a, 0x10, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x45, 0x53, 0x54, 0x10, 0x11, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x33, 0x5f, 0x55, 0x4e, 0x41, 0x55, 0x54, 0x48, 0x45, 0x44,
	0x10, 0x12, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x47, 0x49, 0x54, 0x48, 0x55, 0x42, 0x5f, 0x55, 0x4e, 0x41, 0x55, 0x54, 0x48, 0x45,
	0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x4f, 0x52, 0x47, 0x10, 0x13, 0x12, 0x19,
	0x0a, 0x15, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x55,
	0x49, 0x4c, 0x44, 0x4b, 0x49, 0x54, 0x45, 0x10, 0x14, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x45, 0x52, 0x52, 0x49, 0x54, 0x10,
	0x15, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4a, 0x45, 0x4e, 0x4b, 0x49, 0x4e, 0x53, 0x10, 0x16, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x53, 0x10,
	0x17, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4a, 0x46, 0x52, 0x4f, 0x47, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x4f,
	0x52, 0x59, 0x10, 0x18, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x4c, 0x4f, 0x47, 0x10, 0x19, 0x42, 0x3b, 0x5a, 0x39,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x72, 0x75, 0x66, 0x66,
	0x6c, 0x65, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2f, 0x74, 0x72, 0x75, 0x66, 0x66,
	0x6c, 0x65, 0x68, 0x6f, 0x67, 0x2f, 0x76, 0x33, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x62, 0x2f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_sources_proto_rawDescOnce sync.Once
	file_sources_proto_rawDescData = file_sources_proto_rawDesc
)

func file_sources_proto_rawDescGZIP() []byte {
	file_sources_proto_rawDescOnce.Do(func() {
		file_sources_proto_rawDescData = protoimpl.X.CompressGZIP(file_sources_proto_rawDescData)
	})
	return file_sources_proto_rawDescData
}

var file_sources_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_sources_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_sources_proto_goTypes = []interface{}{
	(SourceType)(0),                         // 0: sources.SourceType
	(Confluence_GetAllSpacesScope)(0),       // 1: sources.Confluence.GetAllSpacesScope
	(*LocalSource)(nil),                     // 2: sources.LocalSource
	(*AzureStorage)(nil),                    // 3: sources.AzureStorage
	(*Bitbucket)(nil),                       // 4: sources.Bitbucket
	(*CircleCI)(nil),                        // 5: sources.CircleCI
	(*Confluence)(nil),                      // 6: sources.Confluence
	(*DockerHub)(nil),                       // 7: sources.DockerHub
	(*ECR)(nil),                             // 8: sources.ECR
	(*Filesystem)(nil),                      // 9: sources.Filesystem
	(*GCS)(nil),                             // 10: sources.GCS
	(*Git)(nil),                             // 11: sources.Git
	(*GitLab)(nil),                          // 12: sources.GitLab
	(*GitHub)(nil),                          // 13: sources.GitHub
	(*JIRA)(nil),                            // 14: sources.JIRA
	(*NPMUnauthenticatedPackage)(nil),       // 15: sources.NPMUnauthenticatedPackage
	(*PyPIUnauthenticatedPackage)(nil),      // 16: sources.PyPIUnauthenticatedPackage
	(*S3)(nil),                              // 17: sources.S3
	(*Slack)(nil),                           // 18: sources.Slack
	(*Test)(nil),                            // 19: sources.Test
	(*Buildkite)(nil),                       // 20: sources.Buildkite
	(*Gerrit)(nil),                          // 21: sources.Gerrit
	(*Jenkins)(nil),                         // 22: sources.Jenkins
	(*Teams)(nil),                           // 23: sources.Teams
	(*Artifactory)(nil),                     // 24: sources.Artifactory
	(*Syslog)(nil),                          // 25: sources.Syslog
	(*durationpb.Duration)(nil),             // 26: google.protobuf.Duration
	(*anypb.Any)(nil),                       // 27: google.protobuf.Any
	(*credentialspb.BasicAuth)(nil),         // 28: credentials.BasicAuth
	(*credentialspb.Unauthenticated)(nil),   // 29: credentials.Unauthenticated
	(*credentialspb.Oauth2)(nil),            // 30: credentials.Oauth2
	(*credentialspb.KeySecret)(nil),         // 31: credentials.KeySecret
	(*credentialspb.GitHubApp)(nil),         // 32: credentials.GitHubApp
	(*credentialspb.CloudEnvironment)(nil),  // 33: credentials.CloudEnvironment
	(*credentialspb.Header)(nil),            // 34: credentials.Header
	(*credentialspb.ClientCredentials)(nil), // 35: credentials.ClientCredentials
}
var file_sources_proto_depIdxs = []int32{
	26, // 0: sources.LocalSource.scan_interval:type_name -> google.protobuf.Duration
	27, // 1: sources.LocalSource.connection:type_name -> google.protobuf.Any
	28, // 2: sources.AzureStorage.basic_auth:type_name -> credentials.BasicAuth
	29, // 3: sources.AzureStorage.unauthenticated:type_name -> credentials.Unauthenticated
	30, // 4: sources.Bitbucket.oauth:type_name -> credentials.Oauth2
	28, // 5: sources.Bitbucket.basic_auth:type_name -> credentials.BasicAuth
	29, // 6: sources.Confluence.unauthenticated:type_name -> credentials.Unauthenticated
	28, // 7: sources.Confluence.basic_auth:type_name -> credentials.BasicAuth
	1,  // 8: sources.Confluence.spaces_scope:type_name -> sources.Confluence.GetAllSpacesScope
	29, // 9: sources.DockerHub.unauthenticated:type_name -> credentials.Unauthenticated
	31, // 10: sources.ECR.access_key:type_name -> credentials.KeySecret
	28, // 11: sources.Git.basic_auth:type_name -> credentials.BasicAuth
	29, // 12: sources.Git.unauthenticated:type_name -> credentials.Unauthenticated
	30, // 13: sources.GitLab.oauth:type_name -> credentials.Oauth2
	28, // 14: sources.GitLab.basic_auth:type_name -> credentials.BasicAuth
	32, // 15: sources.GitHub.github_app:type_name -> credentials.GitHubApp
	29, // 16: sources.GitHub.unauthenticated:type_name -> credentials.Unauthenticated
	28, // 17: sources.JIRA.basic_auth:type_name -> credentials.BasicAuth
	29, // 18: sources.JIRA.unauthenticated:type_name -> credentials.Unauthenticated
	30, // 19: sources.JIRA.oauth:type_name -> credentials.Oauth2
	29, // 20: sources.NPMUnauthenticatedPackage.unauthenticated:type_name -> credentials.Unauthenticated
	29, // 21: sources.PyPIUnauthenticatedPackage.unauthenticated:type_name -> credentials.Unauthenticated
	31, // 22: sources.S3.access_key:type_name -> credentials.KeySecret
	29, // 23: sources.S3.unauthenticated:type_name -> credentials.Unauthenticated
	33, // 24: sources.S3.cloud_environment:type_name -> credentials.CloudEnvironment
	28, // 25: sources.Gerrit.basic_auth:type_name -> credentials.BasicAuth
	29, // 26: sources.Gerrit.unauthenticated:type_name -> credentials.Unauthenticated
	28, // 27: sources.Jenkins.basic_auth:type_name -> credentials.BasicAuth
	34, // 28: sources.Jenkins.header:type_name -> credentials.Header
	35, // 29: sources.Teams.authenticated:type_name -> credentials.ClientCredentials
	28, // 30: sources.Artifactory.basic_auth:type_name -> credentials.BasicAuth
	31, // [31:31] is the sub-list for method output_type
	31, // [31:31] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_sources_proto_init() }
func file_sources_proto_init() {
	if File_sources_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sources_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sources_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AzureStorage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sources_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bitbucket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sources_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CircleCI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sources_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Confluence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sources_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DockerHub); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sources_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ECR); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sources_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filesystem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sources_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GCS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sources_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Git); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sources_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitLab); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sources_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitHub); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sources_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JIRA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sources_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NPMUnauthenticatedPackage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sources_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PyPIUnauthenticatedPackage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sources_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sources_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sources_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Test); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sources_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Buildkite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sources_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Gerrit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sources_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Jenkins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sources_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Teams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sources_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Artifactory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sources_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Syslog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sources_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*AzureStorage_ConnectionString)(nil),
		(*AzureStorage_BasicAuth)(nil),
		(*AzureStorage_ClientCertificate)(nil),
		(*AzureStorage_Unauthenticated)(nil),
	}
	file_sources_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Bitbucket_Token)(nil),
		(*Bitbucket_Oauth)(nil),
		(*Bitbucket_BasicAuth)(nil),
	}
	file_sources_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*CircleCI_Token)(nil),
	}
	file_sources_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Confluence_Unauthenticated)(nil),
		(*Confluence_BasicAuth)(nil),
		(*Confluence_Token)(nil),
	}
	file_sources_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*DockerHub_Unauthenticated)(nil),
	}
	file_sources_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*ECR_AccessKey)(nil),
	}
	file_sources_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*GCS_JsonSa)(nil),
	}
	file_sources_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*Git_BasicAuth)(nil),
		(*Git_Unauthenticated)(nil),
	}
	file_sources_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*GitLab_Token)(nil),
		(*GitLab_Oauth)(nil),
		(*GitLab_BasicAuth)(nil),
	}
	file_sources_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*GitHub_GithubApp)(nil),
		(*GitHub_Token)(nil),
		(*GitHub_Unauthenticated)(nil),
	}
	file_sources_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*JIRA_BasicAuth)(nil),
		(*JIRA_Unauthenticated)(nil),
		(*JIRA_Oauth)(nil),
	}
	file_sources_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*NPMUnauthenticatedPackage_Unauthenticated)(nil),
	}
	file_sources_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*PyPIUnauthenticatedPackage_Unauthenticated)(nil),
	}
	file_sources_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*S3_AccessKey)(nil),
		(*S3_Unauthenticated)(nil),
		(*S3_CloudEnvironment)(nil),
	}
	file_sources_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*Slack_Token)(nil),
	}
	file_sources_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*Buildkite_Token)(nil),
	}
	file_sources_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*Gerrit_BasicAuth)(nil),
		(*Gerrit_Unauthenticated)(nil),
	}
	file_sources_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*Jenkins_BasicAuth)(nil),
		(*Jenkins_Header)(nil),
	}
	file_sources_proto_msgTypes[21].OneofWrappers = []interface{}{
		(*Teams_Token)(nil),
		(*Teams_Authenticated)(nil),
	}
	file_sources_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*Artifactory_BasicAuth)(nil),
		(*Artifactory_AccessToken)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sources_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sources_proto_goTypes,
		DependencyIndexes: file_sources_proto_depIdxs,
		EnumInfos:         file_sources_proto_enumTypes,
		MessageInfos:      file_sources_proto_msgTypes,
	}.Build()
	File_sources_proto = out.File
	file_sources_proto_rawDesc = nil
	file_sources_proto_goTypes = nil
	file_sources_proto_depIdxs = nil
}
